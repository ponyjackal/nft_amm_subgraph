// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string | null {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nft(value: string | null) {
    if (!value) {
      this.unset("nft");
    } else {
      this.set("nft", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get bondingCurveAddress(): string | null {
    let value = this.get("bondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("bondingCurveAddress");
    } else {
      this.set("bondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get assetRecipient(): string | null {
    let value = this.get("assetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assetRecipient(value: string | null) {
    if (!value) {
      this.unset("assetRecipient");
    } else {
      this.set("assetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get spotPrice(): BigInt | null {
    let value = this.get("spotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spotPrice(value: BigInt | null) {
    if (!value) {
      this.unset("spotPrice");
    } else {
      this.set("spotPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastSalePrice(): BigInt | null {
    let value = this.get("lastSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastSalePrice(value: BigInt | null) {
    if (!value) {
      this.unset("lastSalePrice");
    } else {
      this.set("lastSalePrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftIdInventory(): Array<BigInt> | null {
    let value = this.get("nftIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftIdInventory");
    } else {
      this.set("nftIdInventory", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get inventoryCount(): BigInt | null {
    let value = this.get("inventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("inventoryCount");
    } else {
      this.set("inventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenLiquidity(): BigInt | null {
    let value = this.get("tokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("tokenLiquidity");
    } else {
      this.set("tokenLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }
}
