// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewPair", id.toString(), this);
    }
  }

  static load(id: string): NewPair | null {
    return changetype<NewPair | null>(store.get("NewPair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get erc20Contract(): string {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string) {
    this.set("erc20Contract", Value.fromString(value));
  }

  get initialBondingCurveAddress(): string | null {
    let value = this.get("initialBondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("initialBondingCurveAddress");
    } else {
      this.set("initialBondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get initialAssetRecipient(): string | null {
    let value = this.get("initialAssetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAssetRecipient(value: string | null) {
    if (!value) {
      this.unset("initialAssetRecipient");
    } else {
      this.set("initialAssetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialDelta(): BigInt | null {
    let value = this.get("initialDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialDelta(value: BigInt | null) {
    if (!value) {
      this.unset("initialDelta");
    } else {
      this.set("initialDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialFee(): BigInt | null {
    let value = this.get("initialFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialFee(value: BigInt | null) {
    if (!value) {
      this.unset("initialFee");
    } else {
      this.set("initialFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialSpotPrice(): BigInt {
    let value = this.get("initialSpotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialSpotPrice(value: BigInt) {
    this.set("initialSpotPrice", Value.fromBigInt(value));
  }

  get initialNFTIdInventory(): Array<BigInt> | null {
    let value = this.get("initialNFTIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set initialNFTIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("initialNFTIdInventory");
    } else {
      this.set(
        "initialNFTIdInventory",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get initialInventoryCount(): BigInt | null {
    let value = this.get("initialInventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialInventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("initialInventoryCount");
    } else {
      this.set("initialInventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialTokenLiquidity(): BigInt | null {
    let value = this.get("initialTokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialTokenLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("initialTokenLiquidity");
    } else {
      this.set("initialTokenLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get erc20Contract(): string {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string) {
    this.set("erc20Contract", Value.fromString(value));
  }

  get bondingCurveAddress(): string | null {
    let value = this.get("bondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("bondingCurveAddress");
    } else {
      this.set("bondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get assetRecipient(): string | null {
    let value = this.get("assetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assetRecipient(value: string | null) {
    if (!value) {
      this.unset("assetRecipient");
    } else {
      this.set("assetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get spotPrice(): BigInt | null {
    let value = this.get("spotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spotPrice(value: BigInt | null) {
    if (!value) {
      this.unset("spotPrice");
    } else {
      this.set("spotPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftIdInventory(): Array<BigInt> | null {
    let value = this.get("nftIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftIdInventory");
    } else {
      this.set("nftIdInventory", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get inventoryCount(): BigInt | null {
    let value = this.get("inventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("inventoryCount");
    } else {
      this.set("inventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenLiquidity(): BigInt | null {
    let value = this.get("tokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("tokenLiquidity");
    } else {
      this.set("tokenLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialAttributes(): string | null {
    let value = this.get("initialAttributes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAttributes(value: string | null) {
    if (!value) {
      this.unset("initialAttributes");
    } else {
      this.set("initialAttributes", Value.fromString(<string>value));
    }
  }
}

export class PairPrices extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PairPrices entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PairPrices must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PairPrices", id.toString(), this);
    }
  }

  static load(id: string): PairPrices | null {
    return changetype<PairPrices | null>(store.get("PairPrices", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get minSpotAsk(): BigInt | null {
    let value = this.get("minSpotAsk");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minSpotAsk(value: BigInt | null) {
    if (!value) {
      this.unset("minSpotAsk");
    } else {
      this.set("minSpotAsk", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxSpotBid(): BigInt | null {
    let value = this.get("maxSpotBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxSpotBid(value: BigInt | null) {
    if (!value) {
      this.unset("maxSpotBid");
    } else {
      this.set("maxSpotBid", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyPoolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyPoolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyPoolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyPoolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyPoolStat | null {
    return changetype<DailyPoolStat | null>(store.get("DailyPoolStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyPairStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyPairStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyPairStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyPairStat", id.toString(), this);
    }
  }

  static load(id: string): DailyPairStat | null {
    return changetype<DailyPairStat | null>(store.get("DailyPairStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairFees(): BigInt | null {
    let value = this.get("approxPairFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairFees");
    } else {
      this.set("approxPairFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairRevenue(): BigInt | null {
    let value = this.get("approxPairRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairRevenue");
    } else {
      this.set("approxPairRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairSpent(): BigInt | null {
    let value = this.get("approxPairSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairSpent");
    } else {
      this.set("approxPairSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get minSpotAsk(): BigInt | null {
    let value = this.get("minSpotAsk");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minSpotAsk(value: BigInt | null) {
    if (!value) {
      this.unset("minSpotAsk");
    } else {
      this.set("minSpotAsk", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxSpotBid(): BigInt | null {
    let value = this.get("maxSpotBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxSpotBid(value: BigInt | null) {
    if (!value) {
      this.unset("maxSpotBid");
    } else {
      this.set("maxSpotBid", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyProtocolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyProtocolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyProtocolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyProtocolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyProtocolStat | null {
    return changetype<DailyProtocolStat | null>(
      store.get("DailyProtocolStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPoolsCreated(): BigInt | null {
    let value = this.get("numPoolsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPoolsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPoolsCreated");
    } else {
      this.set("numPoolsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPairsCreated(): BigInt | null {
    let value = this.get("numPairsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPairsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPairsCreated");
    } else {
      this.set("numPairsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class BondingCurveStatusUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save BondingCurveStatusUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BondingCurveStatusUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BondingCurveStatusUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): BondingCurveStatusUpdate | null {
    return changetype<BondingCurveStatusUpdate | null>(
      store.get("BondingCurveStatusUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get bondingCurve(): Bytes {
    let value = this.get("bondingCurve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set bondingCurve(value: Bytes) {
    this.set("bondingCurve", Value.fromBytes(value));
  }

  get isAllowed(): boolean {
    let value = this.get("isAllowed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAllowed(value: boolean) {
    this.set("isAllowed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class CallTargetStatusUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CallTargetStatusUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type CallTargetStatusUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CallTargetStatusUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): CallTargetStatusUpdate | null {
    return changetype<CallTargetStatusUpdate | null>(
      store.get("CallTargetStatusUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get target(): Bytes {
    let value = this.get("target");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set target(value: Bytes) {
    this.set("target", Value.fromBytes(value));
  }

  get isAllowed(): boolean {
    let value = this.get("isAllowed");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isAllowed(value: boolean) {
    this.set("isAllowed", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class OwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OwnershipTransferred entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type OwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OwnershipTransferred", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): OwnershipTransferred | null {
    return changetype<OwnershipTransferred | null>(
      store.get("OwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get previousOwner(): Bytes {
    let value = this.get("previousOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set previousOwner(value: Bytes) {
    this.set("previousOwner", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolFeeDisabled extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ProtocolFeeDisabled entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolFeeDisabled must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolFeeDisabled", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProtocolFeeDisabled | null {
    return changetype<ProtocolFeeDisabled | null>(
      store.get("ProtocolFeeDisabled", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): Bytes {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set pair(value: Bytes) {
    this.set("pair", Value.fromBytes(value));
  }

  get isDisabled(): boolean {
    let value = this.get("isDisabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isDisabled(value: boolean) {
    this.set("isDisabled", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolFeeMultiplierUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProtocolFeeMultiplierUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolFeeMultiplierUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ProtocolFeeMultiplierUpdate",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): ProtocolFeeMultiplierUpdate | null {
    return changetype<ProtocolFeeMultiplierUpdate | null>(
      store.get("ProtocolFeeMultiplierUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get newMultiplier(): BigInt {
    let value = this.get("newMultiplier");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newMultiplier(value: BigInt) {
    this.set("newMultiplier", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ProtocolFeeRecipientUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProtocolFeeRecipientUpdate entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ProtocolFeeRecipientUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ProtocolFeeRecipientUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ProtocolFeeRecipientUpdate | null {
    return changetype<ProtocolFeeRecipientUpdate | null>(
      store.get("ProtocolFeeRecipientUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get recipientAddress(): Bytes {
    let value = this.get("recipientAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipientAddress(value: Bytes) {
    this.set("recipientAddress", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class AssetRecipientChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AssetRecipientChange entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssetRecipientChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("AssetRecipientChange", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): AssetRecipientChange | null {
    return changetype<AssetRecipientChange | null>(
      store.get("AssetRecipientChange", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get oldRecipient(): Bytes {
    let value = this.get("oldRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set oldRecipient(value: Bytes) {
    this.set("oldRecipient", Value.fromBytes(value));
  }

  get newRecipient(): Bytes {
    let value = this.get("newRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newRecipient(value: Bytes) {
    this.set("newRecipient", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class DeltaUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DeltaUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type DeltaUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DeltaUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): DeltaUpdate | null {
    return changetype<DeltaUpdate | null>(
      store.get("DeltaUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get oldDelta(): BigInt {
    let value = this.get("oldDelta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldDelta(value: BigInt) {
    this.set("oldDelta", Value.fromBigInt(value));
  }

  get newDelta(): BigInt {
    let value = this.get("newDelta");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newDelta(value: BigInt) {
    this.set("newDelta", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ERC721Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ERC721Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ERC721Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ERC721Deposit", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): ERC721Deposit | null {
    return changetype<ERC721Deposit | null>(
      store.get("ERC721Deposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get depositor(): Bytes {
    let value = this.get("depositor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set depositor(value: Bytes) {
    this.set("depositor", Value.fromBytes(value));
  }

  get ids(): Array<BigInt> {
    let value = this.get("ids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set ids(value: Array<BigInt>) {
    this.set("ids", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class FeeUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeeUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type FeeUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeeUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): FeeUpdate | null {
    return changetype<FeeUpdate | null>(
      store.get("FeeUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get oldFee(): BigInt {
    let value = this.get("oldFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldFee(value: BigInt) {
    this.set("oldFee", Value.fromBigInt(value));
  }

  get newFee(): BigInt {
    let value = this.get("newFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newFee(value: BigInt) {
    this.set("newFee", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class ContractOwnershipTransferred extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ContractOwnershipTransferred entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ContractOwnershipTransferred must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set(
        "ContractOwnershipTransferred",
        id.toBytes().toHexString(),
        this
      );
    }
  }

  static load(id: Bytes): ContractOwnershipTransferred | null {
    return changetype<ContractOwnershipTransferred | null>(
      store.get("ContractOwnershipTransferred", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get newOwner(): Bytes {
    let value = this.get("newOwner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set newOwner(value: Bytes) {
    this.set("newOwner", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class SpotPriceUpdate extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SpotPriceUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SpotPriceUpdate must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SpotPriceUpdate", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): SpotPriceUpdate | null {
    return changetype<SpotPriceUpdate | null>(
      store.get("SpotPriceUpdate", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get oldSpotPrice(): BigInt {
    let value = this.get("oldSpotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set oldSpotPrice(value: BigInt) {
    this.set("oldSpotPrice", Value.fromBigInt(value));
  }

  get newSpotPrice(): BigInt {
    let value = this.get("newSpotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newSpotPrice(value: BigInt) {
    this.set("newSpotPrice", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Swap extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Swap entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Swap must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Swap", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Swap | null {
    return changetype<Swap | null>(store.get("Swap", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get tokenIn(): BigInt {
    let value = this.get("tokenIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenIn(value: BigInt) {
    this.set("tokenIn", Value.fromBigInt(value));
  }

  get nftIdsIn(): Array<BigInt> {
    let value = this.get("nftIdsIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdsIn(value: Array<BigInt>) {
    this.set("nftIdsIn", Value.fromBigIntArray(value));
  }

  get tokenOut(): BigInt {
    let value = this.get("tokenOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenOut(value: BigInt) {
    this.set("tokenOut", Value.fromBigInt(value));
  }

  get nftIdsOut(): Array<BigInt> {
    let value = this.get("nftIdsOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdsOut(value: Array<BigInt>) {
    this.set("nftIdsOut", Value.fromBigIntArray(value));
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Sync extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Sync entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Sync must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Sync", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): Sync | null {
    return changetype<Sync | null>(store.get("Sync", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get reserve0(): BigInt {
    let value = this.get("reserve0");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserve0(value: BigInt) {
    this.set("reserve0", Value.fromBigInt(value));
  }

  get reserve1(): BigInt {
    let value = this.get("reserve1");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reserve1(value: BigInt) {
    this.set("reserve1", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokenDeposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenDeposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenDeposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenDeposit", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokenDeposit | null {
    return changetype<TokenDeposit | null>(
      store.get("TokenDeposit", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get sender(): Bytes {
    let value = this.get("sender");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set sender(value: Bytes) {
    this.set("sender", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class TokenWithdrawal extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenWithdrawal entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type TokenWithdrawal must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenWithdrawal", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): TokenWithdrawal | null {
    return changetype<TokenWithdrawal | null>(
      store.get("TokenWithdrawal", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class WithdrawERC721 extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WithdrawERC721 entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type WithdrawERC721 must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WithdrawERC721", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): WithdrawERC721 | null {
    return changetype<WithdrawERC721 | null>(
      store.get("WithdrawERC721", id.toHexString())
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get recipient(): Bytes {
    let value = this.get("recipient");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set recipient(value: Bytes) {
    this.set("recipient", Value.fromBytes(value));
  }

  get ids(): Array<BigInt> {
    let value = this.get("ids");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set ids(value: Array<BigInt>) {
    this.set("ids", Value.fromBigIntArray(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}
