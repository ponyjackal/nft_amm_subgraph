// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewPair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save NewPair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type NewPair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("NewPair", id.toString(), this);
    }
  }

  static load(id: string): NewPair | null {
    return changetype<NewPair | null>(store.get("NewPair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get blockNumber(): BigInt | null {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt | null) {
    if (!value) {
      this.unset("blockNumber");
    } else {
      this.set("blockNumber", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get erc20Contract(): string {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string) {
    this.set("erc20Contract", Value.fromString(value));
  }

  get initialBondingCurveAddress(): string | null {
    let value = this.get("initialBondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialBondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("initialBondingCurveAddress");
    } else {
      this.set("initialBondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get initialAssetRecipient(): string | null {
    let value = this.get("initialAssetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAssetRecipient(value: string | null) {
    if (!value) {
      this.unset("initialAssetRecipient");
    } else {
      this.set("initialAssetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialDelta(): BigInt | null {
    let value = this.get("initialDelta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialDelta(value: BigInt | null) {
    if (!value) {
      this.unset("initialDelta");
    } else {
      this.set("initialDelta", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialFee(): BigInt | null {
    let value = this.get("initialFee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialFee(value: BigInt | null) {
    if (!value) {
      this.unset("initialFee");
    } else {
      this.set("initialFee", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialSpotPrice(): BigInt {
    let value = this.get("initialSpotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set initialSpotPrice(value: BigInt) {
    this.set("initialSpotPrice", Value.fromBigInt(value));
  }

  get initialNFTIdInventory(): Array<BigInt> | null {
    let value = this.get("initialNFTIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set initialNFTIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("initialNFTIdInventory");
    } else {
      this.set(
        "initialNFTIdInventory",
        Value.fromBigIntArray(<Array<BigInt>>value)
      );
    }
  }

  get initialInventoryCount(): BigInt | null {
    let value = this.get("initialInventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialInventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("initialInventoryCount");
    } else {
      this.set("initialInventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialTokenLiquidity(): BigInt | null {
    let value = this.get("initialTokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set initialTokenLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("initialTokenLiquidity");
    } else {
      this.set("initialTokenLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }
}

export class Pair extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Pair entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Pair must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Pair", id.toString(), this);
    }
  }

  static load(id: string): Pair | null {
    return changetype<Pair | null>(store.get("Pair", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get createdTx(): string | null {
    let value = this.get("createdTx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set createdTx(value: string | null) {
    if (!value) {
      this.unset("createdTx");
    } else {
      this.set("createdTx", Value.fromString(<string>value));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (!value) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (!value) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get nft(): string {
    let value = this.get("nft");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set nft(value: string) {
    this.set("nft", Value.fromString(value));
  }

  get erc20Contract(): string {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string) {
    this.set("erc20Contract", Value.fromString(value));
  }

  get bondingCurveAddress(): string | null {
    let value = this.get("bondingCurveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bondingCurveAddress(value: string | null) {
    if (!value) {
      this.unset("bondingCurveAddress");
    } else {
      this.set("bondingCurveAddress", Value.fromString(<string>value));
    }
  }

  get assetRecipient(): string | null {
    let value = this.get("assetRecipient");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set assetRecipient(value: string | null) {
    if (!value) {
      this.unset("assetRecipient");
    } else {
      this.set("assetRecipient", Value.fromString(<string>value));
    }
  }

  get poolType(): BigInt | null {
    let value = this.get("poolType");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set poolType(value: BigInt | null) {
    if (!value) {
      this.unset("poolType");
    } else {
      this.set("poolType", Value.fromBigInt(<BigInt>value));
    }
  }

  get delta(): BigInt | null {
    let value = this.get("delta");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set delta(value: BigInt | null) {
    if (!value) {
      this.unset("delta");
    } else {
      this.set("delta", Value.fromBigInt(<BigInt>value));
    }
  }

  get fee(): BigInt | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set fee(value: BigInt | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromBigInt(<BigInt>value));
    }
  }

  get spotPrice(): BigInt | null {
    let value = this.get("spotPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set spotPrice(value: BigInt | null) {
    if (!value) {
      this.unset("spotPrice");
    } else {
      this.set("spotPrice", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftIdInventory(): Array<BigInt> | null {
    let value = this.get("nftIdInventory");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set nftIdInventory(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("nftIdInventory");
    } else {
      this.set("nftIdInventory", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }

  get inventoryCount(): BigInt | null {
    let value = this.get("inventoryCount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set inventoryCount(value: BigInt | null) {
    if (!value) {
      this.unset("inventoryCount");
    } else {
      this.set("inventoryCount", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenLiquidity(): BigInt | null {
    let value = this.get("tokenLiquidity");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenLiquidity(value: BigInt | null) {
    if (!value) {
      this.unset("tokenLiquidity");
    } else {
      this.set("tokenLiquidity", Value.fromBigInt(<BigInt>value));
    }
  }

  get initialAttributes(): string | null {
    let value = this.get("initialAttributes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set initialAttributes(value: string | null) {
    if (!value) {
      this.unset("initialAttributes");
    } else {
      this.set("initialAttributes", Value.fromString(<string>value));
    }
  }
}

export class DailyPoolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyPoolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyPoolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyPoolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyPoolStat | null {
    return changetype<DailyPoolStat | null>(store.get("DailyPoolStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyPairStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyPairStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyPairStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyPairStat", id.toString(), this);
    }
  }

  static load(id: string): DailyPairStat | null {
    return changetype<DailyPairStat | null>(store.get("DailyPairStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pair(): string | null {
    let value = this.get("pair");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pair(value: string | null) {
    if (!value) {
      this.unset("pair");
    } else {
      this.set("pair", Value.fromString(<string>value));
    }
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get nftContract(): string | null {
    let value = this.get("nftContract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set nftContract(value: string | null) {
    if (!value) {
      this.unset("nftContract");
    } else {
      this.set("nftContract", Value.fromString(<string>value));
    }
  }

  get erc20Contract(): string | null {
    let value = this.get("erc20Contract");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set erc20Contract(value: string | null) {
    if (!value) {
      this.unset("erc20Contract");
    } else {
      this.set("erc20Contract", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairFees(): BigInt | null {
    let value = this.get("approxPairFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairFees");
    } else {
      this.set("approxPairFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairRevenue(): BigInt | null {
    let value = this.get("approxPairRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairRevenue");
    } else {
      this.set("approxPairRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPairSpent(): BigInt | null {
    let value = this.get("approxPairSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPairSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPairSpent");
    } else {
      this.set("approxPairSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get minSpotAsk(): BigInt | null {
    let value = this.get("minSpotAsk");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set minSpotAsk(value: BigInt | null) {
    if (!value) {
      this.unset("minSpotAsk");
    } else {
      this.set("minSpotAsk", Value.fromBigInt(<BigInt>value));
    }
  }

  get maxSpotBid(): BigInt | null {
    let value = this.get("maxSpotBid");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set maxSpotBid(value: BigInt | null) {
    if (!value) {
      this.unset("maxSpotBid");
    } else {
      this.set("maxSpotBid", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class DailyProtocolStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyProtocolStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyProtocolStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyProtocolStat", id.toString(), this);
    }
  }

  static load(id: string): DailyProtocolStat | null {
    return changetype<DailyProtocolStat | null>(
      store.get("DailyProtocolStat", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dayTimestamp(): BigInt | null {
    let value = this.get("dayTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set dayTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("dayTimestamp");
    } else {
      this.set("dayTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get dayString(): string | null {
    let value = this.get("dayString");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set dayString(value: string | null) {
    if (!value) {
      this.unset("dayString");
    } else {
      this.set("dayString", Value.fromString(<string>value));
    }
  }

  get numSwaps(): BigInt | null {
    let value = this.get("numSwaps");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSwaps(value: BigInt | null) {
    if (!value) {
      this.unset("numSwaps");
    } else {
      this.set("numSwaps", Value.fromBigInt(<BigInt>value));
    }
  }

  get swapVolume(): BigInt | null {
    let value = this.get("swapVolume");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set swapVolume(value: BigInt | null) {
    if (!value) {
      this.unset("swapVolume");
    } else {
      this.set("swapVolume", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolFees(): BigInt | null {
    let value = this.get("approxPoolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolFees");
    } else {
      this.set("approxPoolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxProtocolFees(): BigInt | null {
    let value = this.get("approxProtocolFees");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxProtocolFees(value: BigInt | null) {
    if (!value) {
      this.unset("approxProtocolFees");
    } else {
      this.set("approxProtocolFees", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolRevenue(): BigInt | null {
    let value = this.get("approxPoolRevenue");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolRevenue(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolRevenue");
    } else {
      this.set("approxPoolRevenue", Value.fromBigInt(<BigInt>value));
    }
  }

  get approxPoolSpent(): BigInt | null {
    let value = this.get("approxPoolSpent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set approxPoolSpent(value: BigInt | null) {
    if (!value) {
      this.unset("approxPoolSpent");
    } else {
      this.set("approxPoolSpent", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenDeposited(): BigInt | null {
    let value = this.get("tokenDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("tokenDeposited");
    } else {
      this.set("tokenDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get tokenWithdrawn(): BigInt | null {
    let value = this.get("tokenWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set tokenWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("tokenWithdrawn");
    } else {
      this.set("tokenWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPoolsCreated(): BigInt | null {
    let value = this.get("numPoolsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPoolsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPoolsCreated");
    } else {
      this.set("numPoolsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get numPairsCreated(): BigInt | null {
    let value = this.get("numPairsCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numPairsCreated(value: BigInt | null) {
    if (!value) {
      this.unset("numPairsCreated");
    } else {
      this.set("numPairsCreated", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsDeposited(): BigInt | null {
    let value = this.get("nftsDeposited");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsDeposited(value: BigInt | null) {
    if (!value) {
      this.unset("nftsDeposited");
    } else {
      this.set("nftsDeposited", Value.fromBigInt(<BigInt>value));
    }
  }

  get nftsWithdrawn(): BigInt | null {
    let value = this.get("nftsWithdrawn");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set nftsWithdrawn(value: BigInt | null) {
    if (!value) {
      this.unset("nftsWithdrawn");
    } else {
      this.set("nftsWithdrawn", Value.fromBigInt(<BigInt>value));
    }
  }

  get numBuys(): BigInt | null {
    let value = this.get("numBuys");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numBuys(value: BigInt | null) {
    if (!value) {
      this.unset("numBuys");
    } else {
      this.set("numBuys", Value.fromBigInt(<BigInt>value));
    }
  }

  get numSells(): BigInt | null {
    let value = this.get("numSells");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set numSells(value: BigInt | null) {
    if (!value) {
      this.unset("numSells");
    } else {
      this.set("numSells", Value.fromBigInt(<BigInt>value));
    }
  }
}
