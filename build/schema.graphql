type NewPair @entity {
  id: ID!
  address: String!
  owner: String!
  blockNumber: BigInt
  createdAt: BigInt
  updatedAt: BigInt
  createdTx: String
  nft: String!
  erc20Contract: String!
  initialBondingCurveAddress: String
  initialAssetRecipient: String
  poolType: BigInt
  initialDelta: BigInt
  initialFee: BigInt
  initialSpotPrice: BigInt!
  initialNFTIdInventory: [BigInt!]
  initialInventoryCount: BigInt
  initialTokenLiquidity: BigInt
  pair: Pair @derivedFrom(field: "initialAttributes")
}

type Pair @entity {
  id: ID!
  owner: String!
  createdTx: String
  createdAt: BigInt
  updatedAt: BigInt
  nft: String!
  erc20Contract: String!
  bondingCurveAddress: String
  assetRecipient: String
  poolType: BigInt
  delta: BigInt
  fee: BigInt
  spotPrice: BigInt
  nftIdInventory: [BigInt!]
  inventoryCount: BigInt
  tokenLiquidity: BigInt
  initialAttributes: NewPair
}

type PairPrices @entity {
  id: ID!
  nftContract: String
  minSpotAsk: BigInt
  maxSpotBid: BigInt
}

type DailyPoolStat @entity {
  id: ID!
  dayTimestamp: BigInt
  dayString: String
  nftContract: String
  erc20Contract: String
  numSwaps: BigInt
  swapVolume: BigInt
  approxPoolFees: BigInt
  approxProtocolFees: BigInt
  approxPoolRevenue: BigInt
  approxPoolSpent: BigInt
  tokenDeposited: BigInt
  tokenWithdrawn: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  numBuys: BigInt
  numSells: BigInt
}

type DailyPairStat @entity {
  id: ID!
  pair: String
  dayTimestamp: BigInt
  dayString: String
  nftContract: String
  erc20Contract: String
  numSwaps: BigInt
  swapVolume: BigInt
  approxPairFees: BigInt
  approxProtocolFees: BigInt
  approxPairRevenue: BigInt
  approxPairSpent: BigInt
  tokenDeposited: BigInt
  tokenWithdrawn: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  minSpotAsk: BigInt
  maxSpotBid: BigInt
  numBuys: BigInt
  numSells: BigInt
}

type DailyProtocolStat @entity {
  id: ID!
  dayTimestamp: BigInt
  dayString: String
  numSwaps: BigInt
  swapVolume: BigInt
  approxPoolFees: BigInt
  approxProtocolFees: BigInt
  approxPoolRevenue: BigInt
  approxPoolSpent: BigInt
  tokenDeposited: BigInt
  tokenWithdrawn: BigInt
  numPoolsCreated: BigInt
  numPairsCreated: BigInt
  nftsDeposited: BigInt
  nftsWithdrawn: BigInt
  numBuys: BigInt
  numSells: BigInt
}

type BondingCurveStatusUpdate @entity(immutable: true) {
  id: Bytes!
  bondingCurve: Bytes! # address
  isAllowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CallTargetStatusUpdate @entity(immutable: true) {
  id: Bytes!
  target: Bytes! # address
  isAllowed: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  pair: String
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeDisabled @entity(immutable: true) {
  id: Bytes!
  pair: Bytes! # address
  isDisabled: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeMultiplierUpdate @entity(immutable: true) {
  id: Bytes!
  newMultiplier: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ProtocolFeeRecipientUpdate @entity(immutable: true) {
  id: Bytes!
  recipientAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
type AssetRecipientChange @entity(immutable: true) {
  id: Bytes!
  pair: String
  oldRecipient: Bytes! # address
  newRecipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DeltaUpdate @entity(immutable: true) {
  id: Bytes!
  pair: String
  oldDelta: BigInt! # uint128
  newDelta: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ERC721Deposit @entity(immutable: true) {
  id: Bytes!
  pair: String
  depositor: Bytes! # address
  ids: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type FeeUpdate @entity(immutable: true) {
  id: Bytes!
  pair: String
  oldFee: BigInt! # uint96
  newFee: BigInt! # uint96
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ContractOwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SpotPriceUpdate @entity(immutable: true) {
  id: Bytes!
  pair: String
  oldSpotPrice: BigInt! # uint128
  newSpotPrice: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  tokenIn: BigInt! # uint256
  nftIdsIn: [BigInt!]! # uint256[]
  tokenOut: BigInt! # uint256
  nftIdsOut: [BigInt!]! # uint256[]
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Sync @entity(immutable: true) {
  id: Bytes!
  reserve0: BigInt! # uint256
  reserve1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenDeposit @entity(immutable: true) {
  id: Bytes!
  pair: String
  sender: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokenWithdrawal @entity(immutable: true) {
  id: Bytes!
  pair: String
  recipient: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type WithdrawERC721 @entity(immutable: true) {
  id: Bytes!
  pair: String
  recipient: Bytes! # address
  ids: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
